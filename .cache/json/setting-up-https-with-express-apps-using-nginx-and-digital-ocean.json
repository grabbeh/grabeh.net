{"data":{"markdownRemark":{"html":"<p>This is a quick list of the steps I took to get https up and running with a new app I've been working on called <a href=\"https://github.com/grabbeh/instok\">Instok</a>. Although https is of course a good idea in general, the main motivation was to make sure I could use Stripe.</p>\n<p>Without further ado, the steps are as follows (which are provided mainly as an aide memoire):</p>\n<ul>\n<li>Using OpenSSL, generate an RSA private key and a certificate signing request using <a href=\"http://www.rackspace.com/knowledge_center/article/generate-a-csr-with-openssl\">these instructions</a> (excerpted below).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"nginx\">\n      <pre class=\"gatsby-code-nginx\"><code class=\"gatsby-code-nginx\">openssl genrsa <span class=\"token operator\">-</span>out domain<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">.</span>key <span class=\"token number\">2048</span>\n\nopenssl req <span class=\"token operator\">-</span>new <span class=\"token operator\">-</span>key domain<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">.</span>key <span class=\"token operator\">-</span>out domain<span class=\"token punctuation\">.</span>csr</code></pre>\n      </div>\n<p>If you're planning on testing SSL you can also generate your own certificates using the below (after you've created your key and your CSR).</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\">\n      <pre class=\"gatsby-code-nginx\"><code class=\"gatsby-code-nginx\">    openssl x509 <span class=\"token operator\">-</span>req <span class=\"token operator\">-</span>in certrequest<span class=\"token punctuation\">.</span>csr <span class=\"token operator\">-</span>signkey privatekey<span class=\"token punctuation\">.</span>pem <span class=\"token operator\">-</span>out certificate<span class=\"token punctuation\">.</span>pem</code></pre>\n      </div>\n<ul>\n<li>Purchase a security certificate (or get one for <a href=\"https://konklone.com/post/switch-to-https-now-for-free\">free</a>). I used <a href=\"http://www.namecheap.com\">NameCheap</a> as suggested by <a href=\"https://stripe.com/help/ssl\">Stripe</a>. As part of the process, you will need to submit the certificate signing request generated in the above step.</li>\n<li>Once you have got access to your certificates (mine were emailed to me) copy and paste the certificate(s) into a txt file and store wherever they'll be needed on the VPS or elsewhere.</li>\n</ul>\n<p>In addition to the main certificate, I was emailed an intermediate certificate. If this is the case for you, you can incorporate reference to this intermediate certificate in the 'ca' array referenced below in your node app.</p>\n<ul>\n<li>Incorporate a HTTPS server into your app, principally with the below code. If you're wondering, the pem format is nothing particularly special and can be enabled just be saving a file as 'rsakey.pem' for example provided it has -----BEGIN CERTIFICATE----- at the start and -----END CERTIFICATE----- you guessed it at the end. It is also important to retain the format they are provided in.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"gatsby-code-javascript\"><code class=\"gatsby-code-javascript\">    <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// The RSA private key generated above</span>\n        key<span class=\"token punctuation\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/rsakey.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The certicates sent to you by the certificate issuer</span>\n        cert<span class=\"token punctuation\">:</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/main.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        ca<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config/intermediate.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    https<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port <span class=\"token keyword\">of</span> your choosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>One point that I got stuck on (for about a day alas) was that I initially had the https server listening on 443. I subsequently realised that this meant that Nginx could not use 443 to route requests as this was locked up by the Express app. This meant that Nginx couldn't do its job properly in terms of signposting requests to the various apps running on the VPS nor redirecting http requests to https.</p>\n<ul>\n<li>Once the app is running on your VPS, you'll need to update your nginx.conf file. The server module for https is similar to your usual modules for http but with a reference to port 443 and to the location of your RSA key and your main certificate as per the below. I found I didn't need to reference the intermediate certificate.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"gatsby-code-javascript\"><code class=\"gatsby-code-javascript\">server <span class=\"token punctuation\">{</span>\n       listen <span class=\"token number\">443</span> ssl default_server<span class=\"token punctuation\">;</span>\n\n       ssl_certificate      <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span>pem<span class=\"token punctuation\">;</span>\n       ssl_certificate_key  <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>domain<span class=\"token punctuation\">.</span>pem<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<ul>\n<li>Once you reload the conf file, requests to <a href=\"https://widget.com\">https://widget.com</a> should be encrypted. You'll probably want to redirect http requests to https. This can be done in several ways but the most straight-forward method appears to be:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"gatsby-code-javascript\"><code class=\"gatsby-code-javascript\">server <span class=\"token punctuation\">{</span>\n        listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        server_name http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>widget<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">301</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>widget<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>All in all I found the process relatively straightforward albeit with a few issues caused by my misunderstanding of how ports work.</p>","frontmatter":{"path":"/Setting-up-HTTPS-with-Express-Apps-using-Nginx-and-Digital-Ocean","title":"Setting up HTTPS with Express Apps using Nginx and Digital Ocean","date":null}}},"pathContext":{}}